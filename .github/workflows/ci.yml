name: CI
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest] # [macos-latest, ubuntu-latest, windows-latest]
        deno_version: [1.18.0]
    runs-on: ${{ matrix.os }}
    env:
      WORKING_DIRECTORY_API: ./api
      WORKING_DIRECTORY_FORMS: ./forms
      DOCKER_PROJECT_NAME: ${{ github.event.repository.name }}
      DOCKER_PROJECT_NAME_API: ${{ github.event.repository.name }}_api
      DOCKER_PROJECT_NAME_FORMS: ${{ github.event.repository.name }}_forms
    steps:
      - uses: actions/checkout@v2.4.0

      # Defone some variables that will be used.
      - name: Define short sha variable
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
        
      # Setup cache and deno
      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land      
      
      # Setup deno version
      - name: Use Deno Version ${{ matrix.deno_version }}
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno_version }}

      # Do some format checking
      - name: Check formatting
        run: |
          deno fmt --check
        working-directory: ${{ env.WORKING_DIRECTORY_API }}

      # Cache the Deno files
      - name: Cache files
        run: |
          DENO_ENV=CI deno run -A --import-map=import_map.json --unstable Drakefile.ts cache-reload
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
        env:
          DENO_ENV: CI

      # Start of Docker steps
      
      # API build and tagging
      - name: Build Docker Image API
        run: |
          docker image build -f Dockerfile.prod -t ${{ env.DOCKER_PROJECT_NAME_API }} .
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
        env:
          DENO_ENV: CI
      - name: Image Tagging
        run: |
          docker tag ${{ env.DOCKER_PROJECT_NAME_API }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_API }}:${{ env.SHORT_SHA }}
          docker tag ${{ env.DOCKER_PROJECT_NAME_API }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_API }}:latest

      # API end build and tagging
      
      # FORMS build and tagging
      - name: Build Docker Image FORMS
        run: |
          docker image build -f Dockerfile.prod -t ${{ env.DOCKER_PROJECT_NAME_FORMS }} .
        working-directory: ${{ env.WORKING_DIRECTORY_FORMS }}
        env:
          DENO_ENV: CI
      - name: Image Tagging
        run: |
          docker tag ${{ env.DOCKER_PROJECT_NAME_FORMS }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_FORMS }}:${{ env.SHORT_SHA }}
          docker tag ${{ env.DOCKER_PROJECT_NAME_FORMS }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_FORMS }}:latest

      # FORMS end build and tagging
      
      # End of Docker build and tagging

      # Start tests          
      # TODO : Start up test server
      - name: Run tests          
        run: |
          DENO_ENV=CI deno run -A --import-map=import_map.json --unstable Drakefile.ts test
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
        env:
          DENO_ENV: test
      - name: Check lock file
        continue-on-error: true
        run: |
          DENO_ENV=CI deno run -A --import-map=import_map.json --unstable Drakefile.ts cache
          cat lock.json          
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
      - name: Build / Bundle Project
        # This happens when the pull request has been approved
        if: github.event_name == 'push'  
        run: |
          DENO_ENV=CI deno run -A --import-map=import_map.json --unstable Drakefile.ts bundle
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
      - name: Upload bundle folder
        # This happens when the pull request has been approved
        if: github.event_name == 'push'  
        uses: actions/upload-artifact@v2
        with:
          name: bundle-${{ matrix.deno_version }}-${{ env.SHORT_SHA }}
          path: api/bundle/token-auth-server.bundle.js
      
      #------------------------------------
      # main branch deploy
      #------------------------------------
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo 'Placeholder for creating a semantic release - Left Blank on Purpose'
        working-directory: ${{ env.WORKING_DIRECTORY_API }}
      # Signin to DockerHub
      - name: Login to DockerHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      # Deploy to Docker Hub
      - name: Push to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_API }}:${{ env.SHORT_SHA }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_API }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_FORMS }}:${{ env.SHORT_SHA }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_PROJECT_NAME_FORMS }}:latest
          

      #------------------------------------
      # develop branch
      #------------------------------------
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          echo 'Placeholder for sending to staging - Left Blank on Purpose'
        working-directory: ${{ env.WORKING_DIRECTORY_API }}



